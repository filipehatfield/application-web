name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: application-web/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('application-web/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Instalar dependências
        run: |
          cd application-web
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install
          npm install --save-dev @babel/preset-env @babel/core babel-jest
          npm install process
          npm install path-browserify url --save-dev
          npm install --save-dev webpack webpack-cli
          npm install buffer stream-browserify --save-dev
          npm install --save-dev babel-loader @babel/core @babel/preset-env webpack webpack-cli
          npm install util path-browserify url stream-browserify assert buffer crypto-browserify
          npm install vm-browserify util url stream-browserify assert buffer crypto-browserify path-browserify process browserify-zlib async_hooks

          npm install

      - name: Executar testes
        run: |
          cd application-web
          npm test

      - name: Construir aplicação
        run: |
          cd application-web
          npm run build

      - name: Armazenar artefato
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: application-web/build/*
          retention-days: 7

  dependency-check-and-sast:
    name: Análise de Segurança (SAST e Dependency-Check)
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache Dependency-Check
        uses: actions/cache@v4
        with:
          path: dependency-check
          key: dependency-check-v12.1.0-${{ runner.os }}
          restore-keys: |
            dependency-check-v12.1.0-

      - name: Instalar Dependency-Check
        if: steps.cache-dependency.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          mv dependency-check /opt/

      - name: Analisar dependências do projeto
        run: |
          /bin/sh /opt/dependency-check/bin/dependency-check.sh \
          --project "application-web" \
          --scan ./application-web/app \
          -f ALL \
          --out ./application-web/dependency-check-report

      - name: Salvar relatório de dependências como artefato
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: application-web/dependency-check-report

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dependency-check-and-sast
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        
      
      - name: Instalar SonarQube Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.0.2.4839.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-7.0.2.4839 /opt/sonar-scanner
          export PATH=$PATH:/opt/sonar-scanner/bin

      - name: Rodar análise do SonarQube
        run: |
          sonar-scanner \
          -Dsonar.projectKey=filipehatfield_application-web \
          -Dsonar.organization=filipehatfield \
          -Dsonar.sources=application-web/app \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.branch.name=${{ github.ref_name }} \
          -Dsonar.dependencyCheck.reportPath=application-web/dependency-check-report/dependency-check-report.json \
          -Dsonar.host.url=https://sonarcloud.io
