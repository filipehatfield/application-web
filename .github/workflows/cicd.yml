name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: application-web/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('application-web/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Instalar depend√™ncias
        run: |
          cd application-web
          rm -rf node_modules package-lock.json
          npm cache clean --force          
          npm install
          npm install url process util path-browserify buffer crypto-browserify stream-browserify assert vm-browserify browserify-zlib node-polyfill-webpack-plugin --save-dev

      - name: Executar testes
        run: |
          cd application-web
          npm test

      - name: Construir aplica√ß√£o
        run: |
          cd application-web
          npm run build

      - name: Armazenar artefato
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: application-web/*
          retention-days: 7
      - name: Notifica√ß√£o de Falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com 
          server_port: 587
          username: ${{ secrets.SMTP_USER }} 
          password: ${{ secrets.SMTP_PASSWORD }} 
          subject: "‚ö†Ô∏è CI/CD Pipeline Falhou"
          to: fiaraujo@hotmail.com
          from: filipe.araujolima@gmail.com
          body: "O pipeline falhou na etapa CI. Verifique o relat√≥rio no GitHub."          

  dependency-check-and-sast:
    name: An√°lise de Seguran√ßa (SAST e Dependency-Check)
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Cache Dependency-Check
        uses: actions/cache@v4
        with:
          path: dependency-check
          key: dependency-check-v12.1.0-${{ runner.os }}
          restore-keys: |
            dependency-check-v12.1.0-

      - name: Instalar Dependency-Check
        if: steps.cache-dependency.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          mv dependency-check /opt/

      - name: Analisar depend√™ncias do projeto
        run: |
          /bin/sh /opt/dependency-check/bin/dependency-check.sh \
          --project "application-web" \
          --scan ./application-web/app \
          -f ALL \
          --out ./application-web/dependency-check-report

      - name: Salvar relat√≥rio de depend√™ncias como artefato
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: application-web/dependency-check-report/*
      - name: Notifica√ß√£o de Falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "‚ö†Ô∏è Dependency Check Falhou"
          to: fiaraujo@hotmail.com
          from: filipe.araujolima@gmail.com
          body: "Falha na an√°lise de depend√™ncias."          

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dependency-check-and-sast
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        
      
      - name: Instalar SonarQube Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.0.2.4839.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-7.0.2.4839 /opt/sonar-scanner
          export PATH=$PATH:/opt/sonar-scanner/bin

      - name: Rodar an√°lise do SonarQube
        run: |
          /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=filipehatfield_application-web \
          -Dsonar.organization=filipehatfield \
          -Dsonar.sources=application-web/app \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.branch.name=${{ github.ref_name }} \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.dependencyCheck.reportPath=application-web/dependency-check-report/dependency-check-report.json \
          -Dsonar.host.url=https://sonarcloud.io
      - name: Notifica√ß√£o de Falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "üö® SonarQube Analysis Falhou"
          to: fiaraujo@hotmail.com
          from: filipe.araujolima@gmail.com
          body: "Falha na an√°lise do SonarQube. Verifique o relat√≥rio no SonarCloud."

  release:
    name: Publicar Release
    runs-on: ubuntu-latest
    needs: [ci, dependency-check-and-sast, sonar] 
    if: success() 
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Download do Artefato
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: app-build

      - name: Criar Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }} 
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Artefato para Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-build/app.zip # Caminho do artefato
          asset_name: application-web-v1.0.${{ github.run_number }}.zip
          asset_content_type: application/zip
          
